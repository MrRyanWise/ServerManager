npm install -g @angular/cli
npm WARN invalid config registry=""
npm WARN invalid config Must be a full url with 'http://'
npm WARN invalid config registry=""
npm WARN invalid config Must be a full url with 'http://'
npm ERR! code ENOTFOUND
npm ERR! errno ENOTFOUND
npm ERR! network request to https://registry.npmjs.org/@angular%2fcli failed, reason: getaddrinfo ENOTFOUND registry.npmjs.org
npm ERR! network This is a problem related to network connectivity.
npm ERR! network In most cases you are behind a proxy or have bad network settings.
npm ERR! network
npm ERR! network If you are behind a proxy, please make sure that the
npm ERR! network 'proxy' config is set properly.  See: 'npm help config'

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\psxd044\AppData\Roaming\npm-cache\_logs\2024-02-23T09_30_55_318Z-debug.log

<<<<<<<<<<<<
0 info it worked if it ends with ok
1 verbose cli [
1 verbose cli   'C:\\ProgramData\\espdev\\applications\\node-v12.22.7-win-x64\\node.exe',
1 verbose cli   'C:\\ProgramData\\espdev\\applications\\node-v12.22.7-win-x64\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'run',
1 verbose cli   'start'
1 verbose cli ]
2 info using npm@6.14.15
3 info using node@v12.22.7
4 verbose run-script [ 'prestart', 'start', 'poststart' ]
5 info lifecycle h7z-project@0.0.4-SNAPSHOT~prestart: h7z-project@0.0.4-SNAPSHOT
6 info lifecycle h7z-project@0.0.4-SNAPSHOT~start: h7z-project@0.0.4-SNAPSHOT
7 verbose lifecycle h7z-project@0.0.4-SNAPSHOT~start: unsafe-perm in lifecycle true
8 verbose lifecycle h7z-project@0.0.4-SNAPSHOT~start: PATH: C:\ProgramData\espdev\applications\node-v12.22.7-win-x64\node_modules\npm\node_modules\npm-lifecycle\node-gyp-bin;C:\ProgramData\espdev\Workspace\h7z\front\node_modules\.bin;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\RSA SecurID Token Common;C:\Program Files\RSA SecurID Token Common;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\windows\System32\OpenSSH\;C:\Program Files (x86)\Pulse Secure\VC142.CRT\X64\;C:\Program Files (x86)\Pulse Secure\VC142.CRT\X86\;C:\Program Files (x86)\Common Files\Pulse Secure\TNC Client Plugin\;C:\Program Files (x86)\Common Files\Pulse Secure\VC142.CRT\X64\;C:\Program Files (x86)\Common Files\Pulse Secure\VC142.CRT\X86\;C:\Program Files (x86)\DISFE\GestionDesLogs;C:\Users\psxd044\AppData\Local\Microsoft\WindowsApps;C:\Users\psxd044\OneDrive - LA POSTE GROUPE\Bureau\Docs\Applications\git\cmd;C:\ProgramData\espdev\apache-maven-3.9.3\bin;C:\ProgramData\espdev\applications\node-v12.22.7-win-x64;C:\Users\psxd044\AppData\Local\GitHubDesktop\bin;C:\Users\psxd044\OneDrive - LA POSTE GROUPE\Bureau\Docs\Applications\Microsoft VS Code\bin;
9 verbose lifecycle h7z-project@0.0.4-SNAPSHOT~start: CWD: C:\ProgramData\espdev\Workspace\h7z\front
10 silly lifecycle h7z-project@0.0.4-SNAPSHOT~start: Args: [ '/d /s /c', 'ng serve --proxy-config proxy.conf.json' ]
11 info lifecycle h7z-project@0.0.4-SNAPSHOT~start: Failed to exec start script
12 verbose stack Error: h7z-project@0.0.4-SNAPSHOT start: `ng serve --proxy-config proxy.conf.json`
12 verbose stack spawn ENOENT
12 verbose stack     at ChildProcess.<anonymous> (C:\ProgramData\espdev\applications\node-v12.22.7-win-x64\node_modules\npm\node_modules\npm-lifecycle\lib\spawn.js:48:18)
12 verbose stack     at ChildProcess.emit (events.js:314:20)
12 verbose stack     at maybeClose (internal/child_process.js:1022:16)
12 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:287:5)
13 verbose pkgid h7z-project@0.0.4-SNAPSHOT
14 verbose cwd C:\ProgramData\espdev\Workspace\h7z\front
15 verbose Windows_NT 10.0.19045
16 verbose argv "C:\\ProgramData\\espdev\\applications\\node-v12.22.7-win-x64\\node.exe" "C:\\ProgramData\\espdev\\applications\\node-v12.22.7-win-x64\\node_modules\\npm\\bin\\npm-cli.js" "run" "start"
17 verbose node v12.22.7
18 verbose npm  v6.14.15
19 error code ELIFECYCLE
20 error syscall spawn
21 error file C:\windows\system32\cmd.exe
22 error errno ENOENT
23 error h7z-project@0.0.4-SNAPSHOT start: `ng serve --proxy-config proxy.conf.json`
23 error spawn ENOENT
24 error Failed at the h7z-project@0.0.4-SNAPSHOT start script.
24 error This is probably not a problem with npm. There is likely additional logging output above.
25 verbose exit [ 1, true ]
<<<<<<<<<
describe('ListPieceComponent2', () => {
  const activatedRoute = createSpyObj('ActivatedRoute', [], {snapshot: getParamMap("1234")} )
  const component = new ListPieceComponent(activatedRoute);
  component.pieces = [
    {
      identifiant: '12345456',
      libelle: '',
      dateAcquisition: null,
      categorie: {
        code: 'CT01',
        libelle: 'Mon libelle'
      },
      format: 'PDF',
      taille:'33',
      document: 'JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9DcmVhdG9yIChNb3ppbGxhLzUuMCBcKFdpbmRvd3MgTlQgMTAuMD',

      contenuToBlob(): Blob {
        return null;
      },

      getBlobProperty(): BlobPropertyBag {
        return null;
      }
    }];
  function getParamMap(id: string) {
    const paramMap = new Map<string, string>();
    paramMap.set('identifiantDossierCollecte', id);
    return { paramMap };
  }
  it('should create', () => {
    expect(component).toBeTruthy();
  });
  it('should set pieces from route snapshot data', () => {
    const piecesResult: PieceDemande[] = [
      {
        identifiant: '12345456',
        libelle: '',
        dateAcquisition: null,
        categorie: {
          code: 'CT01',
          libelle: 'Mon libelle'
        },
        format: 'PDF',
        taille:'33',
        document: 'JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PC9DcmVhdG9yIChNb3ppbGxhLzUuMCBcKFdpbmRvd3MgTlQgMTAuMD',

        contenuToBlob(): Blob {
          return null;
        },

        getBlobProperty(): BlobPropertyBag {
          return null;
        }
      }]
    expect(component.pieces).toEqual(piecesResult);
  });
});
///////////////////

 import {Injectable} from "@angular/core";
 import {NetworkService} from "./shared/network.service";
 import {Observable} from "rxjs";
 import {PieceDemande} from "../model/PieceDemande";
 import {KEY_RECUPERATION_PIECE_DEMANDE} from "../utils/api-map-constantes";

 @Injectable({
   providedIn: 'root'
 })
 export class PieceService {


   constructor(private http: NetworkService) {
   }

   /**
    * Renvoie un dossier en fonction du dossier demandé
    * @param identifiantDossierCollecte
    */
   public recupererPiecesDemande(identifiantDossier: string): Observable<PieceDemande[]> {
     const expandData = {identifiantDossier};
     return this.http.get<PieceDemande[]>(KEY_RECUPERATION_PIECE_DEMANDE, expandData, 'PieceService', 'recupererPiecesDemande');
   }

   /**
    * Permet de creer un Blob depuis le pdf encodé
    */
   public pdfToBlob(pdf: string): Blob {
     //conversion du pdf encodé en byte
     const pdfByte = atob(pdf);
     const pdfDecode = new TextDecoder().decode(Uint8Array.from(pdfByte, element => element.codePointAt(0)));
     //construction de l'objet a partir duquel l'url sera généré
     return new Blob([pdfDecode], {type: 'application/pdf'});
   }

 }

///

import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot} from "@angular/router";
import {Observable} from "rxjs";
import {inject, Injectable} from "@angular/core";
import {PieceService} from "./piece.service";
import {PieceDemande} from "../model/PieceDemande";
import {map} from "rxjs/operators";

@Injectable({
  providedIn: 'root'
})
export class PieceResolver implements Resolve<Observable<PieceDemande[]>> {

  private pieceService = inject(PieceService);

  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<PieceDemande[]> {
    return this.pieceService.recupererPiecesDemande(route.paramMap.get('identifiantDossierCollecte')).pipe(map(
      pieces => pieces.map(
        piece => {
          let instance = new PieceDemande();
          Object.assign(instance, piece);
          return instance;
        })
    ));
  }

}


/////////////////////////////////////

import { TestBed } from '@angular/core/testing';
import { PieceResolver } from './piece-resolver.service';
import { RouterTestingModule } from '@angular/router/testing';
import { ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';
import { of } from 'rxjs';
import { PieceService } from './piece.service'; // Import du service de pièces
import { PieceDemande } from './piece-demande.model'; // Import du modèle de pièce demande

describe('PieceResolver', () => {
  let resolver: PieceResolver;
  let pieceServiceSpy: jasmine.SpyObj<PieceService>;
  let routerSpy: jasmine.SpyObj<Router>;

  beforeEach(() => {
    const pieceServiceSpyObj = jasmine.createSpyObj('PieceService', ['recupererPiecesDemande']);
    const routerSpyObj = jasmine.createSpyObj('Router', ['navigateByUrl']);

    TestBed.configureTestingModule({
      imports: [RouterTestingModule],
      providers: [
        { provide: PieceService, useValue: pieceServiceSpyObj },
        { provide: Router, useValue: routerSpyObj }
      ]
    });

    resolver = TestBed.inject(PieceResolver);
    pieceServiceSpy = TestBed.inject(PieceService) as jasmine.SpyObj<PieceService>;
    routerSpy = TestBed.inject(Router) as jasmine.SpyObj<Router>;
  });

  it('should be created', () => {
    expect(resolver).toBeTruthy();
  });

  it('should resolve pieces', () => {
    const pieces: PieceDemande[] = []; // Mettez vos données de test ici
    pieceServiceSpy.recupererPiecesDemande.and.returnValue(of(pieces));

    const route: ActivatedRouteSnapshot = new ActivatedRouteSnapshot();
    route.paramMap = jasmine.createSpyObj('ParamMap', ['get']);
    route.paramMap.get.and.returnValue('dummyId');

    const state: RouterStateSnapshot = jasmine.createSpyObj('RouterStateSnapshot', ['toString']);

    resolver.resolve(route, state).subscribe(resolvedPieces => {
      expect(resolvedPieces).toEqual(pieces);
    });

    expect(pieceServiceSpy.recupererPiecesDemande).toHaveBeenCalledWith('dummyId');
  });

  it('should handle error', () => {
    pieceServiceSpy.recupererPiecesDemande.and.returnValue(of(null)); // Simuler une erreur

    const route: ActivatedRouteSnapshot = new ActivatedRouteSnapshot();
    route.paramMap = jasmine.createSpyObj('ParamMap', ['get']);
    route.paramMap.get.and.returnValue('dummyId');

    const state: RouterStateSnapshot = jasmine.createSpyObj('RouterStateSnapshot', ['toString']);

    resolver.resolve(route, state).subscribe(resolvedPieces => {
      expect(resolvedPieces).toBeNull();
      expect(routerSpy.navigateByUrl).toHaveBeenCalledWith('/error');
    });

    expect(pieceServiceSpy.recupererPiecesDemande).toHaveBeenCalledWith('dummyId');
  });
});

::::::::::
package fr.laposte.disf.canal.h7z.api.piecedemande;

import fr.laposte.disf.canal.client.h5z.modeles.ErrorModel;
import fr.laposte.disf.canal.h7z.api.piecedemande.mapper.PieceDemandeMapper;
import fr.laposte.disf.canal.h7z.api.piecedemande.model.PieceDemandeApi;
import fr.laposte.disf.canal.h7z.domain.Contenu;
import fr.laposte.disf.canal.h7z.domain.ContextePiece;
import fr.laposte.disf.canal.h7z.domain.DossierFacade;
import fr.laposte.disf.canal.h7z.domain.service.ContenuService;
import fr.laposte.disf.canal.h7z.helper.AppConstants;
import fr.laposte.disf.fwmc.arch.rest.annotation.ResourceMap;
import fr.laposte.disf.fwmc.arch.rest.annotation.ResourceVersion;
import fr.laposte.disf.fwmc.arch.rest.annotation.RestCtrlResource;
import fr.laposte.disf.fwmc.arch.rest.impl.DefaultController;
import fr.laposte.disf.fwmc.core.ApplicationManager;
import fr.laposte.disf.fwmc.core.error.ApplicationException;
import fr.laposte.disf.fwmc.core.log.Logger;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.annotation.Secured;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import reactor.core.publisher.Mono;

import java.util.List;

import static fr.laposte.disf.canal.h7z.api.piecedemande.ApiMapConstantes.KEY_RECUPERATION_CONTENU_PDF;
import static fr.laposte.disf.canal.h7z.api.piecedemande.ApiMapConstantes.KEY_RECUPERATION_PIECES_DEMANDE_PAR_ID_DOSSIER;
import static fr.laposte.disf.canal.h7z.api.piecedemande.ApiMapConstantes.URL_RECUPERATION_CONTENU_PDF;
import static fr.laposte.disf.canal.h7z.api.piecedemande.ApiMapConstantes.URL_RECUPERATION_PIECES_DEMANDE_PAR_ID_DOSSIER;

@ResourceVersion(1)
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
@RestCtrlResource(url = "/demande")
public class PieceDemandeController extends DefaultController {

    private static final Logger LOGGER = ApplicationManager.getLogger(PieceDemandeController.class);

    private final DossierFacade facade;

    private final PieceDemandeMapper pieceDemandeMapper;

    private final ContenuService contenuService;


    @Secured(AppConstants.SERVICE_BANCAIRE_SB096)
    @GetMapping(value = URL_RECUPERATION_PIECES_DEMANDE_PAR_ID_DOSSIER, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResourceMap(rel = KEY_RECUPERATION_PIECES_DEMANDE_PAR_ID_DOSSIER, genParams = ResourceMap.Generate.BY_VALUE_ELSE_BY_NAME)
    @ApiOperation(value = KEY_RECUPERATION_PIECES_DEMANDE_PAR_ID_DOSSIER, notes = "Récupère les documents de la demande")
    // TODO : mettre une liste dans ApiResponse et non juste l'objet.
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Documents récupérés", response = PieceDemandeApi.class), @ApiResponse(code = 404, message = "Documents non trouvés", response = ErrorModel.class),
            @ApiResponse(code = 500, message = "Erreur système", response = ErrorModel.class)})
    public Mono<ResponseEntity<List<PieceDemandeApi>>> recuperer(
            @PathVariable(value = "identifiantDossier") final String identifiantDossier) throws ApplicationException {
        LOGGER.info("[PieceDemandeController.recuperer] identifiant dossier : %s", identifiantDossier);

        var listePiecesDemandeApi = pieceDemandeMapper.mapList(facade.recupererPieces(identifiantDossier));

        LOGGER.info("[PieceDemandeController.recuperer] pieces de la demande : %s", listePiecesDemandeApi);

        return Mono.just(ResponseEntity.ok(listePiecesDemandeApi));
    }

    @GetMapping(value = URL_RECUPERATION_CONTENU_PDF, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ResourceMap(rel = KEY_RECUPERATION_CONTENU_PDF, genParams = ResourceMap.Generate.BY_VALUE_ELSE_BY_NAME)
    @ApiOperation(value = KEY_RECUPERATION_CONTENU_PDF, notes = "Récupère le contenu pdf du document")
    @ApiResponses(value = {@ApiResponse(code = 200, message = "Documents récupérés", response = byte[].class), @ApiResponse(code = 404, message = "Documents non trouvés", response = ErrorModel.class),
        @ApiResponse(code = 500, message = "Erreur système", response = ErrorModel.class)})
    public Mono<ResponseEntity<Contenu>> recupererContenuPdf(
        @PathVariable final String identifiantPiece,
        @RequestParam final String codeTypologie,
        @RequestParam final String codeContexte,
        @RequestParam final String codeEtablissement,
        @RequestParam final String codeAuthentification) {
        LOGGER.info("[PieceDemandeController.recupereDocument] identifiant piece : %s", identifiantPiece);

        var contexte = ContextePiece.builder().codeContexte(codeContexte).codeEtablissement(codeEtablissement).codeAuthentification(codeAuthentification).build();
        var contenu = contenuService.recuperer(identifiantPiece, codeTypologie, contexte);

        LOGGER.info("[PieceDemandeController.recupererDocument] contenu de la piece present : %s", contenu.isPresent());

        return Mono.just(ResponseEntity.ok(contenu));
    }



}




package fr.laposte.disf.canal.h7z.api;

import fr.laposte.disf.canal.h7z.api.piecedemande.PieceDemandeController;
import fr.laposte.disf.canal.h7z.api.piecedemande.mapper.PieceDemandeMapper;
import fr.laposte.disf.canal.h7z.domain.DossierFacade;
import fr.laposte.disf.canal.h7z.domain.PieceDemande;
import fr.laposte.disf.canal.h7z.fixture.PieceDemandeFixture;
import fr.laposte.disfe.fwroa.test.bootstrap.DefaultCanalTest;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import java.util.ArrayList;
import java.util.List;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(MockitoJUnitRunner.Silent.class)
public class PieceDemandeControllerTest extends DefaultCanalTest {

    private MockMvc mockMvc;

    @Mock
    private DossierFacade facade;

    @Mock
    private PieceDemandeMapper mapper;

    PieceDemandeController pieceDemandeController;

    @Before
    public void prepare() {
        pieceDemandeController = new PieceDemandeController(facade, mapper, null);
        mockMvc = standaloneBuild(pieceDemandeController);
    }

    @Test
    public void testRecupererPieceDemande() throws Exception {
        String idDossier = "123456";
        List<PieceDemande> pieceDemandeList = new ArrayList<>();
        var pieceDemande = PieceDemandeFixture.getDefault();
        pieceDemandeList.add(pieceDemande);
        Mockito.doReturn(pieceDemandeList).when(facade).recupererPieces(idDossier);
        final MvcResult mvcResult = mockMvc.perform(get("/api/v1/demande/{identifiantDossier}/pieces", idDossier).contentType(MediaType.APPLICATION_JSON_VALUE)).andExpect(request().asyncStarted()).andReturn();
        mockMvc.perform(asyncDispatch(mvcResult)).andExpect(status().isOk());
    }


}
------------------
import fr.laposte.disf.canal.h7z.api.piecedemande.PieceDemandeController;
import fr.laposte.disf.canal.h7z.domain.Contenu;
import fr.laposte.disf.canal.h7z.domain.service.ContenuService;
import fr.laposte.disf.canal.h7z.domain.ContextePiece;
import fr.laposte.disfe.fwroa.test.bootstrap.DefaultCanalTest;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;

@RunWith(MockitoJUnitRunner.class)
public class PieceDemandeControllerTest extends DefaultCanalTest {

    private MockMvc mockMvc;

    @Mock
    private ContenuService contenuService;

    PieceDemandeController pieceDemandeController;

    @Before
    public void prepare() {
        pieceDemandeController = new PieceDemandeController(null, null, contenuService);
        mockMvc = standaloneSetup(pieceDemandeController).build();
    }

    @Test
    public void testRecupererContenuPdf() throws Exception {
        // Configuration des valeurs de test
        String identifiantPiece = "PIECE123";
        String codeTypologie = "TYP1";
        String codeContexte = "CTX1";
        String codeEtablissement = "EST1";
        String codeAuthentification = "AUTH1";

        // Création d'un objet Contenu de test
        Contenu contenu = new Contenu();
        contenu.setContenu(new byte[]{1, 2, 3, 4}); // exemple de contenu

        // Simuler le comportement du service
        Mockito.doReturn(contenu).when(contenuService).recuperer(identifiantPiece, codeTypologie, 
            ContextePiece.builder()
            .codeContexte(codeContexte)
            .codeEtablissement(codeEtablissement)
            .codeAuthentification(codeAuthentification)
            .build());

        // Effectuer la requête GET à l'URL de la méthode testée
        MvcResult mvcResult = mockMvc.perform(
            get("/api/v1/demande/piece/{identifiantPiece}", identifiantPiece)
            .param("codeTypologie", codeTypologie)
            .param("codeContexte", codeContexte)
            .param("codeEtablissement", codeEtablissement)
            .param("codeAuthentification", codeAuthentification)
            .contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(status().isOk()) // Vérifier que la réponse est OK
            .andReturn();
    }
}
